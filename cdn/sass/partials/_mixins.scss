// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

// FONT FACES

// usage example: @include font-face(gotham,/fonts/gotham.eot,/fonts/gotham.woff,/fonts/gotham.ttf,/fonts/gotham.svg, 300, normal);

@mixin font-face($fontFamily, $eotFileSrc, $woffFileSrc, $ttfFileSrc, $svgFileSrc, $weight, $style) {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype'),
       url($svgFileSrc)  format('svg');
  font-weight: $weight;
  font-style: $style;
}

// TRIANGLE

@mixin triangle($dir, $size, $color) {
    border: $size transparent solid;
 
    @if ($dir == "top" or $dir == "up" or $dir == "left" or $dir == "before") {
        &:before {
            @if ($dir == "top" or $dir == "up") {
                border-bottom-color: $color;
            }
            @else if ($dir == "right" or $dir == "after") {
                border-left-color: $color;
            }
        }
    }
    @else if ($dir == "bottom" or $dir == "down" or $dir == "left" or $dir == "before") {
        &:after {
            @if ($dir == "bottom" or $dir == "down") {
                border-top-color: $color;
            }
            @else if ($dir == "left" or $dir == "before") {
                border-right-color: $color;
            }
        }
    }
}

//border-shadow

@mixin box-shadow-2($args1, $args2) {
  -webkit-box-shadow: $args1, $args2;
  -moz-box-shadow: $args1, $args2;
  box-shadow: $args1, $args2;
}

// HOVER

// usage example: @include hover(.3s);

@mixin hover($time) {
  -webkit-transition: all $time ease-in-out;
  -o-transition: all $time ease-in-out;
  -moz-transition: all $time ease-in-out;
  transition: all $time ease-in-out;
}


// OPACITY

@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=($opacity * 100));
}


// BLACK / WHITE OPACITY

@function black($opacity) {
  @return rgba(0,0,0,$opacity)
}

@function white($opacity) {
  @return rgba(255,255,255,$opacity)
}


// SCALE

// usage example: @include scale(2);

@mixin scale($value) { 
  -webkit-transform: scale($value) ;
  transform: scale($value);
}

// SHADOWS

@mixin shadow($color) {
  -moz-box-shadow: 10px 10px 30px 0px $color;
  -webkit-box-shadow: 10px 10px 30px 0px $color;
  -o-box-shadow: 10px 10px 30px 0px $color;
  box-shadow: 10px 10px 30px 0px $color;
}


// TRANSLATE X

@mixin translateX($value) {
  -webkit-transform: translateX($value);
  -ms-transform: translateX($value);
  -o-transform: translateX($value);
  transform: translateX($value);
}

// TRANSLATE Y

@mixin translateY($value) {
  -webkit-transform: translateY($value);
  -ms-transform: translateY($value);
  -o-transform: translateY($value);
  transform: translateY($value);
}

// TRANSITION SCALEDOWN

@mixin scaledown($time) {
  -webkit-animation: scaledown $time ease-out 1;
  animation: scaledown $time ease-out 1;
}

// @keyframes scaledown {
//   0% { @include scale(1); }
//   50% { @include scale(.95); };
//   100% { @include scale(1); };
// }

// @-webkit-keyframes scaledown {
//   0% { @include scale(1); }
//   50% { @include scale(.95); };
//   100% { @include scale(1); };
// }

// TRANSITION SCALE UP HOVER

@mixin ScaleUp($time) {
  -webkit-animation: ScaleUp $time ease-in-out 1;
  animation: ScaleUp $time ease-in-out 1;
}

// @keyframes ScaleUp {
//   0% { @include scale(1); }
//   50% { @include scale(1.1); };
//   100% { @include scale(1); };
// }

// @-webkit-keyframes ScaleUp {
//   0% { @include scale(1); }
//   50% { @include scale(1.1); };
//   100% { @include scale(1); };
// }

// TRANSITION FADEIN

@mixin fadeIn($time) {
  -webkit-animation: fadeIn $time ease-out 1;
  animation: fadeIn $time ease-out 1;
}

// @keyframes fadeIn {
//   0% { opacity: 0; }
//   to { opacity: 1; };
// }

// @-webkit-keyframes fadeIn {
//   0% { opacity: 0; }
//   to { opacity: 1; };
// }

// TRANSITION SLIDEINDOWN

// @-webkit-keyframes slideInDown {
//   0% { @include translateY(-100px); opacity: 0; }
//   75% { @include translateY(0); }
//   100% { opacity: 1; }
// }

// @keyframes slideInDown {
//   0% { @include translateY(-100px); opacity: 0; }
//   75% { @include translateY(0); }
//   100% { opacity: 1; }
// }

@mixin slideInDown($time) {
  animation: slideInDown $time ease-in-out;
  -webkit-animation: slideInDown $time ease-in-out;
}

// TRANSITION SLIDEINUP

@-webkit-keyframes slideInUp {
  0% { @include translateY(20px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@keyframes slideInUp {
  0% { @include translateY(20px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@mixin slideInUp($time) {
  animation: slideInUp $time ease-in-out;
  -webkit-animation: slideInUp $time ease-in-out;
}

// TRANSITION SLIDEINRIGHT

@-webkit-keyframes slideInRight {
  0% { @include translateX(100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@keyframes slideInRight {
  0% { @include translateX(100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@mixin slideInRight($time) {
  animation: slideInRight $time ease-out backwards;
  -webkit-animation: slideInRight $time ease-out backwards;
}

// TRANSITION SLIDEINLEFT

@-webkit-keyframes slideInLeft {
  0% { @include translateX(-100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@keyframes slideInLeft {
  0% { @include translateX(-100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@mixin slideInLeft($time) {
  animation: slideInLeft $time ease-out backwards;
  -webkit-animation: slideInLeft $time ease-out backwards;
}




// BACKGROUND GRADIENTS

// usage example: @include background-gradient(red, black, vertical) 

@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;
    @if $orientation == vertical {
    // vertical
      background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
    }
    @else if $orientation == horizontal
    {
    // horizontal
      background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
    @else
    {
    // radial
      background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
}


